name: Module-Based Test Execution with Rerun Support

on:
  pull_request:
    types: [opened, synchronize, reopened]
  issue_comment:
    types: [created]
    filters:
      issue:
        pull_request: exists

jobs:
  discover_modules:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Detect modules
        id: set-matrix
        run: |
          modules=$(find . -maxdepth 1 -type d \( ! -name "." \) | grep -v '/\.' | sed 's|./||' | jq -R -s -c 'split("\n")[:-1]')
          echo "Detected modules: $modules"
          echo "matrix=$modules" >> $GITHUB_OUTPUT

  run_tests:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: discover_modules
    strategy:
      matrix:
        module: ${{ fromJson(needs.discover_modules.outputs.matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run tests for ${{ matrix.module }}
        run: |
          echo "Running tests in ${{ matrix.module }}"
          if [ "$RANDOM" -gt 20000 ]; then exit 1; fi  # Simulate failure

      - name: Save failure info
        if: failure()
        run: echo "${{ matrix.module }}" >> failed_modules.txt

      - name: Upload failure log
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: failed-modules
          path: failed_modules.txt

  rerun_failed_tests:
    runs-on: ubuntu-latest
    needs: run_tests
    if: |
      github.event_name == 'issue_comment' &&
      github.event.issue.pull_request &&
      contains(github.event.comment.body, 'rerun-failure')
    steps:
      - name: Download failed test list
        uses: actions/download-artifact@v4
        with:
          name: failed-modules

      - name: Read failed modules
        id: read_failed
        run: |
          modules=$(cat failed_modules.txt | tr '\n' ',')
          echo "Failed modules: $modules"
          echo "modules=$modules" >> $GITHUB_ENV

      - name: Rerun failed module tests
        run: |
          for module in $(echo $modules | tr ',' ' '); do
            echo "Re-running tests in $module"
            # Simulate rerun
            if [ "$RANDOM" -gt 20000 ]; then exit 1; fi
          done
